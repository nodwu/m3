// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/m3db/m3/src/metrics/generated/proto/metricpb/chunked.proto

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
	Package metricpb is a generated protocol buffer package.

	It is generated from these files:
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/chunked.proto
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/composite.proto
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/metadata.proto
		github.com/m3db/m3/src/metrics/generated/proto/metricpb/metric.proto

	It has these top-level messages:
		ChunkedID
		ChunkedMetric
		ChunkedMetricWithStoragePolicy
		ChunkedMetricWithStoragePolicyWithEncodeTime
		CounterWithMetadatas
		BatchTimerWithMetadatas
		GaugeWithMetadatas
		ForwardedMetricWithMetadata
		TimedMetricWithMetadata
		MetricWithMetadatas
		PipelineMetadata
		Metadata
		StagedMetadata
		StagedMetadatas
		ForwardMetadata
		TimedMetadata
		Counter
		BatchTimer
		Gauge
		TimedMetric
		ForwardedMetric
*/
package metricpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import policypb "github.com/m3db/m3/src/metrics/generated/proto/policypb"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChunkedID struct {
	Prefix []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Suffix []byte `protobuf:"bytes,3,opt,name=suffix,proto3" json:"suffix,omitempty"`
}

func (m *ChunkedID) Reset()                    { *m = ChunkedID{} }
func (m *ChunkedID) String() string            { return proto.CompactTextString(m) }
func (*ChunkedID) ProtoMessage()               {}
func (*ChunkedID) Descriptor() ([]byte, []int) { return fileDescriptorChunked, []int{0} }

func (m *ChunkedID) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *ChunkedID) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChunkedID) GetSuffix() []byte {
	if m != nil {
		return m.Suffix
	}
	return nil
}

type ChunkedMetric struct {
	ChunkedId ChunkedID `protobuf:"bytes,1,opt,name=chunked_id,json=chunkedId" json:"chunked_id"`
	TimeNanos int64     `protobuf:"varint,2,opt,name=time_nanos,json=timeNanos,proto3" json:"time_nanos,omitempty"`
	Value     float64   `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ChunkedMetric) Reset()                    { *m = ChunkedMetric{} }
func (m *ChunkedMetric) String() string            { return proto.CompactTextString(m) }
func (*ChunkedMetric) ProtoMessage()               {}
func (*ChunkedMetric) Descriptor() ([]byte, []int) { return fileDescriptorChunked, []int{1} }

func (m *ChunkedMetric) GetChunkedId() ChunkedID {
	if m != nil {
		return m.ChunkedId
	}
	return ChunkedID{}
}

func (m *ChunkedMetric) GetTimeNanos() int64 {
	if m != nil {
		return m.TimeNanos
	}
	return 0
}

func (m *ChunkedMetric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ChunkedMetricWithStoragePolicy struct {
	ChunkedMetric ChunkedMetric          `protobuf:"bytes,1,opt,name=chunked_metric,json=chunkedMetric" json:"chunked_metric"`
	StoragePolicy policypb.StoragePolicy `protobuf:"bytes,2,opt,name=storage_policy,json=storagePolicy" json:"storage_policy"`
}

func (m *ChunkedMetricWithStoragePolicy) Reset()         { *m = ChunkedMetricWithStoragePolicy{} }
func (m *ChunkedMetricWithStoragePolicy) String() string { return proto.CompactTextString(m) }
func (*ChunkedMetricWithStoragePolicy) ProtoMessage()    {}
func (*ChunkedMetricWithStoragePolicy) Descriptor() ([]byte, []int) {
	return fileDescriptorChunked, []int{2}
}

func (m *ChunkedMetricWithStoragePolicy) GetChunkedMetric() ChunkedMetric {
	if m != nil {
		return m.ChunkedMetric
	}
	return ChunkedMetric{}
}

func (m *ChunkedMetricWithStoragePolicy) GetStoragePolicy() policypb.StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return policypb.StoragePolicy{}
}

type ChunkedMetricWithStoragePolicyWithEncodeTime struct {
	ChunkedMetricWithStoragePolicy ChunkedMetricWithStoragePolicy `protobuf:"bytes,1,opt,name=chunked_metric_with_storage_policy,json=chunkedMetricWithStoragePolicy" json:"chunked_metric_with_storage_policy"`
	EncodeNanos                    int64                          `protobuf:"varint,2,opt,name=encode_nanos,json=encodeNanos,proto3" json:"encode_nanos,omitempty"`
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) Reset() {
	*m = ChunkedMetricWithStoragePolicyWithEncodeTime{}
}
func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) String() string {
	return proto.CompactTextString(m)
}
func (*ChunkedMetricWithStoragePolicyWithEncodeTime) ProtoMessage() {}
func (*ChunkedMetricWithStoragePolicyWithEncodeTime) Descriptor() ([]byte, []int) {
	return fileDescriptorChunked, []int{3}
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) GetChunkedMetricWithStoragePolicy() ChunkedMetricWithStoragePolicy {
	if m != nil {
		return m.ChunkedMetricWithStoragePolicy
	}
	return ChunkedMetricWithStoragePolicy{}
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) GetEncodeNanos() int64 {
	if m != nil {
		return m.EncodeNanos
	}
	return 0
}

func init() {
	proto.RegisterType((*ChunkedID)(nil), "metricpb.ChunkedID")
	proto.RegisterType((*ChunkedMetric)(nil), "metricpb.ChunkedMetric")
	proto.RegisterType((*ChunkedMetricWithStoragePolicy)(nil), "metricpb.ChunkedMetricWithStoragePolicy")
	proto.RegisterType((*ChunkedMetricWithStoragePolicyWithEncodeTime)(nil), "metricpb.ChunkedMetricWithStoragePolicyWithEncodeTime")
}
func (m *ChunkedID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChunked(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChunked(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChunked(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	return i, nil
}

func (m *ChunkedMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChunked(dAtA, i, uint64(m.ChunkedId.Size()))
	n1, err := m.ChunkedId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.TimeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChunked(dAtA, i, uint64(m.TimeNanos))
	}
	if m.Value != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *ChunkedMetricWithStoragePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedMetricWithStoragePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChunked(dAtA, i, uint64(m.ChunkedMetric.Size()))
	n2, err := m.ChunkedMetric.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintChunked(dAtA, i, uint64(m.StoragePolicy.Size()))
	n3, err := m.StoragePolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintChunked(dAtA, i, uint64(m.ChunkedMetricWithStoragePolicy.Size()))
	n4, err := m.ChunkedMetricWithStoragePolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.EncodeNanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChunked(dAtA, i, uint64(m.EncodeNanos))
	}
	return i, nil
}

func encodeVarintChunked(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChunkedID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovChunked(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovChunked(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovChunked(uint64(l))
	}
	return n
}

func (m *ChunkedMetric) Size() (n int) {
	var l int
	_ = l
	l = m.ChunkedId.Size()
	n += 1 + l + sovChunked(uint64(l))
	if m.TimeNanos != 0 {
		n += 1 + sovChunked(uint64(m.TimeNanos))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *ChunkedMetricWithStoragePolicy) Size() (n int) {
	var l int
	_ = l
	l = m.ChunkedMetric.Size()
	n += 1 + l + sovChunked(uint64(l))
	l = m.StoragePolicy.Size()
	n += 1 + l + sovChunked(uint64(l))
	return n
}

func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) Size() (n int) {
	var l int
	_ = l
	l = m.ChunkedMetricWithStoragePolicy.Size()
	n += 1 + l + sovChunked(uint64(l))
	if m.EncodeNanos != 0 {
		n += 1 + sovChunked(uint64(m.EncodeNanos))
	}
	return n
}

func sovChunked(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChunked(x uint64) (n int) {
	return sovChunked(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChunkedID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunked
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = append(m.Suffix[:0], dAtA[iNdEx:postIndex]...)
			if m.Suffix == nil {
				m.Suffix = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunked(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunked
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunked
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkedId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkedId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanos", wireType)
			}
			m.TimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipChunked(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunked
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedMetricWithStoragePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunked
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedMetricWithStoragePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedMetricWithStoragePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkedMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkedMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunked(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunked
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkedMetricWithStoragePolicyWithEncodeTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunked
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkedMetricWithStoragePolicyWithEncodeTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkedMetricWithStoragePolicyWithEncodeTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkedMetricWithStoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunked
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChunkedMetricWithStoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodeNanos", wireType)
			}
			m.EncodeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChunked(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChunked
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChunked(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChunked
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunked
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChunked
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChunked
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChunked(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChunked = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChunked   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/m3db/m3/src/metrics/generated/proto/metricpb/chunked.proto", fileDescriptorChunked)
}

var fileDescriptorChunked = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0x86, 0x3d, 0xb5, 0x6b, 0xea, 0xe3, 0xcb, 0x62, 0x5a, 0x5a, 0x63, 0xa8, 0xda, 0x6a, 0xe5,
	0x45, 0x2b, 0x41, 0xbd, 0x68, 0xd7, 0xae, 0xbc, 0xf0, 0xa2, 0x17, 0xd4, 0x42, 0xa1, 0x1b, 0x21,
	0x8d, 0xc6, 0xd2, 0x50, 0x4b, 0x23, 0xa4, 0x51, 0x2f, 0x59, 0xe4, 0x19, 0xf2, 0x20, 0x79, 0x10,
	0x6f, 0x02, 0x79, 0x82, 0x10, 0x9c, 0x17, 0x09, 0x9a, 0x19, 0x05, 0x2b, 0x26, 0x86, 0x64, 0x77,
	0xce, 0xcf, 0xd1, 0x7f, 0xbe, 0xff, 0x0c, 0x82, 0x45, 0xc4, 0x44, 0x5c, 0x06, 0x16, 0xe1, 0x89,
	0x9d, 0xcc, 0xc2, 0xc0, 0x4e, 0x66, 0x76, 0x91, 0x13, 0x3b, 0xa1, 0x22, 0x67, 0xa4, 0xb0, 0x23,
	0x9a, 0xd2, 0xdc, 0x17, 0x34, 0xb4, 0xb3, 0x9c, 0x0b, 0xae, 0xf5, 0x2c, 0xb0, 0x49, 0x5c, 0xa6,
	0xbf, 0x69, 0x68, 0x49, 0x19, 0x3f, 0xa9, 0xf5, 0xc9, 0xbb, 0x1d, 0xc3, 0x88, 0x47, 0x5c, 0x7d,
	0x17, 0x94, 0x2b, 0xd9, 0x29, 0x93, 0xaa, 0x52, 0x1f, 0x4e, 0x9c, 0x7b, 0xee, 0xcf, 0xf8, 0x9a,
	0x91, 0xff, 0x59, 0xa0, 0x0b, 0xe5, 0x62, 0x7e, 0x85, 0xde, 0x27, 0xc5, 0xb3, 0x74, 0xf0, 0x73,
	0xe8, 0x66, 0x39, 0x5d, 0xb1, 0x7f, 0x63, 0xf4, 0x1a, 0x4d, 0x07, 0xae, 0xee, 0x30, 0x86, 0x4e,
	0xe8, 0x0b, 0x7f, 0xfc, 0x48, 0xaa, 0xb2, 0xae, 0x66, 0x8b, 0x72, 0x55, 0xcd, 0xb6, 0xd5, 0xac,
	0xea, 0xcc, 0x63, 0x18, 0x6a, 0xc3, 0xcf, 0x12, 0x04, 0x7f, 0x04, 0xd0, 0x89, 0x3d, 0x16, 0x4a,
	0xe3, 0xfe, 0xfb, 0xa7, 0x56, 0x9d, 0xda, 0xba, 0xd9, 0x3e, 0xef, 0x6c, 0x2e, 0x5e, 0xb5, 0xdc,
	0x9e, 0x1e, 0x5e, 0x86, 0xf8, 0x25, 0x80, 0x60, 0x09, 0xf5, 0x52, 0x3f, 0xe5, 0x85, 0x5c, 0xde,
	0x76, 0x7b, 0x95, 0xf2, 0xa5, 0x12, 0xf0, 0x33, 0x78, 0xfc, 0xc7, 0x5f, 0x97, 0x54, 0x02, 0x20,
	0x57, 0x35, 0xe6, 0x29, 0x02, 0xa3, 0x01, 0xf0, 0x93, 0x89, 0xf8, 0xbb, 0xe0, 0xb9, 0x1f, 0xd1,
	0x6f, 0x32, 0x39, 0x76, 0x60, 0x54, 0x13, 0x29, 0x0c, 0x4d, 0xf5, 0x62, 0x8f, 0x4a, 0x39, 0x68,
	0xb2, 0x21, 0x69, 0xe4, 0x72, 0x60, 0x54, 0x28, 0x5b, 0x4f, 0x5d, 0x54, 0x12, 0x56, 0x2e, 0xf5,
	0xa5, 0xad, 0xc6, 0xda, 0xda, 0xa5, 0xd8, 0x15, 0xcd, 0x33, 0x04, 0x6f, 0x0f, 0xe3, 0x56, 0xc2,
	0x22, 0x25, 0x3c, 0xa4, 0x3f, 0x58, 0x42, 0xf1, 0x11, 0x98, 0x4d, 0x78, 0xef, 0x2f, 0x13, 0xb1,
	0x77, 0x0b, 0x45, 0x05, 0x9a, 0xde, 0x11, 0x68, 0x6f, 0x87, 0x66, 0x33, 0xc8, 0xe1, 0xc3, 0xbd,
	0x81, 0x01, 0x95, 0x24, 0x8d, 0x27, 0xe9, 0x2b, 0x4d, 0x3e, 0xca, 0x7c, 0xb9, 0xd9, 0x1a, 0xe8,
	0x7c, 0x6b, 0xa0, 0xcb, 0xad, 0x81, 0x4e, 0xae, 0x8c, 0xd6, 0xaf, 0x0f, 0x0f, 0xfc, 0x4f, 0x82,
	0xae, 0xec, 0x67, 0xd7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xef, 0x23, 0xca, 0x67, 0x69, 0x03, 0x00,
	0x00,
}
